// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for GetTransactionsRequestDirection.
const (
	Asc  GetTransactionsRequestDirection = "asc"
	Desc GetTransactionsRequestDirection = "desc"
)

// Defines values for GetTransactionsRequestSortBy.
const (
	Amount    GetTransactionsRequestSortBy = "amount"
	CreatedAt GetTransactionsRequestSortBy = "created_at"
)

// AddData defines model for AddData.
type AddData struct {
	// Текущий баланс пользователя в копейках с учетом пополнения.
	Balance int64 `json:"balance"`
}

// AddRequest defines model for AddRequest.
type AddRequest struct {
	// Сумма в копейках.
	Cash int64 `json:"cash"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// AddResponse defines model for AddResponse.
type AddResponse struct {
	Data  *AddData `json:"data,omitempty"`
	Error *Error   `json:"error,omitempty"`
}

// CancelData defines model for CancelData.
type CancelData struct {
	// Текущий баланс пользователя в копейках с учетом разрезервированных средств.
	Balance int64 `json:"balance"`
}

// CancelRequest defines model for CancelRequest.
type CancelRequest struct {
	// Идентификатор заказа
	OrderID int64 `json:"orderID"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// CancelResponse defines model for CancelResponse.
type CancelResponse struct {
	Data  *CancelData `json:"data,omitempty"`
	Error *Error      `json:"error,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetBalanceData defines model for GetBalanceData.
type GetBalanceData struct {
	// Текущий баланс пользователя в копейках.
	Balance int64 `json:"balance"`
}

// GetBalanceRequest defines model for GetBalanceRequest.
type GetBalanceRequest struct {
	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// GetBalanceResponse defines model for GetBalanceResponse.
type GetBalanceResponse struct {
	Data  *GetBalanceData `json:"data,omitempty"`
	Error *Error          `json:"error,omitempty"`
}

// GetReportData defines model for GetReportData.
type GetReportData struct {
	// Ссылка на CSV файл.
	Url string `json:"url"`
}

// GetReportRequest defines model for GetReportRequest.
type GetReportRequest struct {
	// Время в формате 'yyyy-mm'.
	Period string `json:"period"`
}

// GetReportResponse defines model for GetReportResponse.
type GetReportResponse struct {
	Data  *GetReportData `json:"data,omitempty"`
	Error *Error         `json:"error,omitempty"`
}

// GetTransactionsByTimeData defines model for GetTransactionsByTimeData.
type GetTransactionsByTimeData struct {
	// Список транзакций пользователя userID.
	Transactions []Transaction `json:"transactions"`
}

// GetTransactionsByTimeRequest defines model for GetTransactionsByTimeRequest.
type GetTransactionsByTimeRequest struct {
	// Временная точка в формате RFC3339, до которой происходит поиск транзакций.
	End time.Time `json:"end"`

	// Временная точка в формате RFC3339, от которой начинается поиск транзакций.
	Start time.Time `json:"start"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// GetTransactionsByTimeResponse defines model for GetTransactionsByTimeResponse.
type GetTransactionsByTimeResponse struct {
	Data  *GetTransactionsByTimeData `json:"data,omitempty"`
	Error *Error                     `json:"error,omitempty"`
}

// GetTransactionsData defines model for GetTransactionsData.
type GetTransactionsData struct {
	// Отсортированный список транзакций пользователя userID.
	Transactions []Transaction `json:"transactions"`
}

// GetTransactionsRequest defines model for GetTransactionsRequest.
type GetTransactionsRequest struct {
	// Направление сортировки (по возрастанию / убыванию).
	Direction GetTransactionsRequestDirection `json:"direction"`

	// Количество записей.
	Limit int64 `json:"limit"`

	// Смещение по записям.
	Offset int64 `json:"offset"`

	// Поле, по которому происходит сортировка (по дате / по сумме).
	SortBy GetTransactionsRequestSortBy `json:"sortBy"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// Направление сортировки (по возрастанию / убыванию).
type GetTransactionsRequestDirection string

// Поле, по которому происходит сортировка (по дате / по сумме).
type GetTransactionsRequestSortBy string

// GetTransactionsResponse defines model for GetTransactionsResponse.
type GetTransactionsResponse struct {
	Data  *GetTransactionsData `json:"data,omitempty"`
	Error *Error               `json:"error,omitempty"`
}

// ReserveData defines model for ReserveData.
type ReserveData struct {
	// Текущий баланс пользователя в копейках за вычетом зарезервированных средств.
	Balance int64 `json:"balance"`
}

// ReserveRequest defines model for ReserveRequest.
type ReserveRequest struct {
	// Идентификатор заказа
	OrderID int64 `json:"orderID"`

	// Стоимость заказа в копейках.
	Price int64 `json:"price"`

	// Идентификатор услуги.
	ServiceID int64 `json:"serviceID"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// ReserveResponse defines model for ReserveResponse.
type ReserveResponse struct {
	Data  *ReserveData `json:"data,omitempty"`
	Error *Error       `json:"error,omitempty"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	// Количество денежных средств, задействованных в данной денежной операции.
	Amount int64 `json:"amount"`

	// Время, когда была совершена операция.
	CreatedAt time.Time `json:"createdAt"`

	// Описание денежной операции.
	Description string `json:"description"`
}

// WriteOffData defines model for WriteOffData.
type WriteOffData struct {
	// Текущий баланс пользователя в копейках за вычетом списанных средств.
	Balance int64 `json:"balance"`
}

// WriteOffRequest defines model for WriteOffRequest.
type WriteOffRequest struct {
	// Идентификатор заказа
	OrderID int64 `json:"orderID"`

	// Стоимость заказа в копейках.
	Price int64 `json:"price"`

	// Идентификатор услуги.
	ServiceID int64 `json:"serviceID"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// WriteOffResponse defines model for WriteOffResponse.
type WriteOffResponse struct {
	Data  *WriteOffData `json:"data,omitempty"`
	Error *Error        `json:"error,omitempty"`
}

// PostAddJSONBody defines parameters for PostAdd.
type PostAddJSONBody = AddRequest

// PostCancelJSONBody defines parameters for PostCancel.
type PostCancelJSONBody = CancelRequest

// PostGetBalanceJSONBody defines parameters for PostGetBalance.
type PostGetBalanceJSONBody = GetBalanceRequest

// PostGetReportJSONBody defines parameters for PostGetReport.
type PostGetReportJSONBody = GetReportRequest

// PostGetTransactionsJSONBody defines parameters for PostGetTransactions.
type PostGetTransactionsJSONBody = GetTransactionsRequest

// PostGetTransactionsByTimeJSONBody defines parameters for PostGetTransactionsByTime.
type PostGetTransactionsByTimeJSONBody = GetTransactionsByTimeRequest

// PostReserveJSONBody defines parameters for PostReserve.
type PostReserveJSONBody = ReserveRequest

// PostWriteOffJSONBody defines parameters for PostWriteOff.
type PostWriteOffJSONBody = WriteOffRequest

// PostAddJSONRequestBody defines body for PostAdd for application/json ContentType.
type PostAddJSONRequestBody = PostAddJSONBody

// PostCancelJSONRequestBody defines body for PostCancel for application/json ContentType.
type PostCancelJSONRequestBody = PostCancelJSONBody

// PostGetBalanceJSONRequestBody defines body for PostGetBalance for application/json ContentType.
type PostGetBalanceJSONRequestBody = PostGetBalanceJSONBody

// PostGetReportJSONRequestBody defines body for PostGetReport for application/json ContentType.
type PostGetReportJSONRequestBody = PostGetReportJSONBody

// PostGetTransactionsJSONRequestBody defines body for PostGetTransactions for application/json ContentType.
type PostGetTransactionsJSONRequestBody = PostGetTransactionsJSONBody

// PostGetTransactionsByTimeJSONRequestBody defines body for PostGetTransactionsByTime for application/json ContentType.
type PostGetTransactionsByTimeJSONRequestBody = PostGetTransactionsByTimeJSONBody

// PostReserveJSONRequestBody defines body for PostReserve for application/json ContentType.
type PostReserveJSONRequestBody = PostReserveJSONBody

// PostWriteOffJSONRequestBody defines body for PostWriteOff for application/json ContentType.
type PostWriteOffJSONRequestBody = PostWriteOffJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /add)
	PostAdd(ctx echo.Context) error

	// (POST /cancel)
	PostCancel(ctx echo.Context) error

	// (POST /getBalance)
	PostGetBalance(ctx echo.Context) error

	// (POST /getReport)
	PostGetReport(ctx echo.Context) error

	// (POST /getTransactions)
	PostGetTransactions(ctx echo.Context) error

	// (POST /getTransactionsByTime)
	PostGetTransactionsByTime(ctx echo.Context) error

	// (POST /reserve)
	PostReserve(ctx echo.Context) error

	// (POST /writeOff)
	PostWriteOff(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAdd converts echo context to params.
func (w *ServerInterfaceWrapper) PostAdd(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAdd(ctx)
	return err
}

// PostCancel converts echo context to params.
func (w *ServerInterfaceWrapper) PostCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCancel(ctx)
	return err
}

// PostGetBalance converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetBalance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetBalance(ctx)
	return err
}

// PostGetReport converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetReport(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetReport(ctx)
	return err
}

// PostGetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetTransactions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetTransactions(ctx)
	return err
}

// PostGetTransactionsByTime converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetTransactionsByTime(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetTransactionsByTime(ctx)
	return err
}

// PostReserve converts echo context to params.
func (w *ServerInterfaceWrapper) PostReserve(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReserve(ctx)
	return err
}

// PostWriteOff converts echo context to params.
func (w *ServerInterfaceWrapper) PostWriteOff(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostWriteOff(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/add", wrapper.PostAdd)
	router.POST(baseURL+"/cancel", wrapper.PostCancel)
	router.POST(baseURL+"/getBalance", wrapper.PostGetBalance)
	router.POST(baseURL+"/getReport", wrapper.PostGetReport)
	router.POST(baseURL+"/getTransactions", wrapper.PostGetTransactions)
	router.POST(baseURL+"/getTransactionsByTime", wrapper.PostGetTransactionsByTime)
	router.POST(baseURL+"/reserve", wrapper.PostReserve)
	router.POST(baseURL+"/writeOff", wrapper.PostWriteOff)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
