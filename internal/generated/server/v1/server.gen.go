// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for GetTransactionsRequestDirection.
const (
	Asc  GetTransactionsRequestDirection = "asc"
	Desc GetTransactionsRequestDirection = "desc"
)

// Defines values for GetTransactionsRequestSortBy.
const (
	Amount    GetTransactionsRequestSortBy = "amount"
	CreatedAt GetTransactionsRequestSortBy = "created_at"
)

// AddData defines model for AddData.
type AddData struct {
	// Текущий баланс пользователя в копейках с учетом пополнения.
	Balance int64 `json:"balance"`
}

// AddRequest defines model for AddRequest.
type AddRequest struct {
	// Сумма в копейках.
	Cash int64 `json:"cash"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// AddResponse defines model for AddResponse.
type AddResponse struct {
	Data  *AddData `json:"data,omitempty"`
	Error *Error   `json:"error,omitempty"`
}

// CancelData defines model for CancelData.
type CancelData struct {
	// Текущий баланс пользователя в копейках с учетом разрезервирования средств.
	Balance int64 `json:"balance"`
}

// CancelRequest defines model for CancelRequest.
type CancelRequest struct {
	// Идентификатор заказа
	OrderID int64 `json:"orderID"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// CancelResponse defines model for CancelResponse.
type CancelResponse struct {
	Data  *CancelData `json:"data,omitempty"`
	Error *Error      `json:"error,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetBalanceData defines model for GetBalanceData.
type GetBalanceData struct {
	// Текущий баланс пользователя в копейках.
	Balance int64 `json:"balance"`
}

// GetBalanceRequest defines model for GetBalanceRequest.
type GetBalanceRequest struct {
	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// GetBalanceResponse defines model for GetBalanceResponse.
type GetBalanceResponse struct {
	Data  *GetBalanceData `json:"data,omitempty"`
	Error *Error          `json:"error,omitempty"`
}

// GetReportData defines model for GetReportData.
type GetReportData struct {
	// Ссылка на CSV файл.
	Url string `json:"url"`
}

// GetReportRequest defines model for GetReportRequest.
type GetReportRequest struct {
	// Время в формате 'yyyy-mm'.
	Period string `json:"period"`
}

// GetReportResponse defines model for GetReportResponse.
type GetReportResponse struct {
	Data  *GetReportData `json:"data,omitempty"`
	Error *Error         `json:"error,omitempty"`
}

// GetTransactionsByTimeData defines model for GetTransactionsByTimeData.
type GetTransactionsByTimeData struct {
	// Список транзакций пользователя userID.
	Transactions []Transaction `json:"transactions"`
}

// GetTransactionsByTimeRequest defines model for GetTransactionsByTimeRequest.
type GetTransactionsByTimeRequest struct {
	// Временная точка в формате time.RFC3339, до которой происходит поиск транзакций.
	End time.Time `json:"end"`

	// Временная точка в формате time.RFC3339, от которой начинается поиск транзакций.
	Start time.Time `json:"start"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// GetTransactionsByTimeResponse defines model for GetTransactionsByTimeResponse.
type GetTransactionsByTimeResponse struct {
	Data  *GetTransactionsByTimeData `json:"data,omitempty"`
	Error *Error                     `json:"error,omitempty"`
}

// GetTransactionsData defines model for GetTransactionsData.
type GetTransactionsData struct {
	// Отсортированный список транзакций пользователя userID.
	Transactions []Transaction `json:"transactions"`
}

// GetTransactionsRequest defines model for GetTransactionsRequest.
type GetTransactionsRequest struct {
	// Направление поиска (по возрастанию/убыванию).
	Direction GetTransactionsRequestDirection `json:"direction"`

	// Количество записей.
	Limit int64 `json:"limit"`

	// Смещение по отсортированным записям.
	Offset int64 `json:"offset"`

	// Поле, по которому происходит сортировка (дате/сумме).
	SortBy GetTransactionsRequestSortBy `json:"sortBy"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// Направление поиска (по возрастанию/убыванию).
type GetTransactionsRequestDirection string

// Поле, по которому происходит сортировка (дате/сумме).
type GetTransactionsRequestSortBy string

// GetTransactionsResponse defines model for GetTransactionsResponse.
type GetTransactionsResponse struct {
	Data  *GetTransactionsData `json:"data,omitempty"`
	Error *Error               `json:"error,omitempty"`
}

// ReserveData defines model for ReserveData.
type ReserveData struct {
	// Текущий баланс пользователя в копейках с учетом резервирования средств.
	Balance int64 `json:"balance"`
}

// ReserveRequest defines model for ReserveRequest.
type ReserveRequest struct {
	// Идентификатор заказа
	OrderID int64 `json:"orderID"`

	// Стоимость заказа в копейках.
	Price int64 `json:"price"`

	// Идентификатор услуги.
	ServiceID int64 `json:"serviceID"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// ReserveResponse defines model for ReserveResponse.
type ReserveResponse struct {
	Data  *ReserveData `json:"data,omitempty"`
	Error *Error       `json:"error,omitempty"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	// Количество денежных средств, задействованных в данной денежной операции.
	Amount int64 `json:"amount"`

	// Время, когда была совершена операция.
	CreatedAt time.Time `json:"createdAt"`

	// Описывает вид денежной операции.
	Description string `json:"description"`
}

// WriteOffData defines model for WriteOffData.
type WriteOffData struct {
	// Текущий баланс пользователя в копейках с учетом списания средств.
	Balance int64 `json:"balance"`
}

// WriteOffRequest defines model for WriteOffRequest.
type WriteOffRequest struct {
	// Идентификатор заказа
	OrderID int64 `json:"orderID"`

	// Стоимость заказа в копейках.
	Price int64 `json:"price"`

	// Идентификатор услуги.
	ServiceID int64 `json:"serviceID"`

	// Идентификатор пользователя.
	UserID int64 `json:"userID"`
}

// WriteOffResponse defines model for WriteOffResponse.
type WriteOffResponse struct {
	Data  *WriteOffData `json:"data,omitempty"`
	Error *Error        `json:"error,omitempty"`
}

// PostAddJSONBody defines parameters for PostAdd.
type PostAddJSONBody = AddRequest

// PostCancelJSONBody defines parameters for PostCancel.
type PostCancelJSONBody = CancelRequest

// PostGetBalanceJSONBody defines parameters for PostGetBalance.
type PostGetBalanceJSONBody = GetBalanceRequest

// PostGetReportJSONBody defines parameters for PostGetReport.
type PostGetReportJSONBody = GetReportRequest

// PostGetTransactionsJSONBody defines parameters for PostGetTransactions.
type PostGetTransactionsJSONBody = GetTransactionsRequest

// PostGetTransactionsByTimeJSONBody defines parameters for PostGetTransactionsByTime.
type PostGetTransactionsByTimeJSONBody = GetTransactionsByTimeRequest

// PostReserveJSONBody defines parameters for PostReserve.
type PostReserveJSONBody = ReserveRequest

// PostWriteOffJSONBody defines parameters for PostWriteOff.
type PostWriteOffJSONBody = WriteOffRequest

// PostAddJSONRequestBody defines body for PostAdd for application/json ContentType.
type PostAddJSONRequestBody = PostAddJSONBody

// PostCancelJSONRequestBody defines body for PostCancel for application/json ContentType.
type PostCancelJSONRequestBody = PostCancelJSONBody

// PostGetBalanceJSONRequestBody defines body for PostGetBalance for application/json ContentType.
type PostGetBalanceJSONRequestBody = PostGetBalanceJSONBody

// PostGetReportJSONRequestBody defines body for PostGetReport for application/json ContentType.
type PostGetReportJSONRequestBody = PostGetReportJSONBody

// PostGetTransactionsJSONRequestBody defines body for PostGetTransactions for application/json ContentType.
type PostGetTransactionsJSONRequestBody = PostGetTransactionsJSONBody

// PostGetTransactionsByTimeJSONRequestBody defines body for PostGetTransactionsByTime for application/json ContentType.
type PostGetTransactionsByTimeJSONRequestBody = PostGetTransactionsByTimeJSONBody

// PostReserveJSONRequestBody defines body for PostReserve for application/json ContentType.
type PostReserveJSONRequestBody = PostReserveJSONBody

// PostWriteOffJSONRequestBody defines body for PostWriteOff for application/json ContentType.
type PostWriteOffJSONRequestBody = PostWriteOffJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /add)
	PostAdd(ctx echo.Context) error

	// (POST /cancel)
	PostCancel(ctx echo.Context) error

	// (POST /getBalance)
	PostGetBalance(ctx echo.Context) error

	// (POST /getReport)
	PostGetReport(ctx echo.Context) error

	// (POST /getTransactions)
	PostGetTransactions(ctx echo.Context) error

	// (POST /getTransactionsByTime)
	PostGetTransactionsByTime(ctx echo.Context) error

	// (POST /reserve)
	PostReserve(ctx echo.Context) error

	// (POST /writeOff)
	PostWriteOff(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAdd converts echo context to params.
func (w *ServerInterfaceWrapper) PostAdd(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAdd(ctx)
	return err
}

// PostCancel converts echo context to params.
func (w *ServerInterfaceWrapper) PostCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCancel(ctx)
	return err
}

// PostGetBalance converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetBalance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetBalance(ctx)
	return err
}

// PostGetReport converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetReport(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetReport(ctx)
	return err
}

// PostGetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetTransactions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetTransactions(ctx)
	return err
}

// PostGetTransactionsByTime converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetTransactionsByTime(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetTransactionsByTime(ctx)
	return err
}

// PostReserve converts echo context to params.
func (w *ServerInterfaceWrapper) PostReserve(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReserve(ctx)
	return err
}

// PostWriteOff converts echo context to params.
func (w *ServerInterfaceWrapper) PostWriteOff(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostWriteOff(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/add", wrapper.PostAdd)
	router.POST(baseURL+"/cancel", wrapper.PostCancel)
	router.POST(baseURL+"/getBalance", wrapper.PostGetBalance)
	router.POST(baseURL+"/getReport", wrapper.PostGetReport)
	router.POST(baseURL+"/getTransactions", wrapper.PostGetTransactions)
	router.POST(baseURL+"/getTransactionsByTime", wrapper.PostGetTransactionsByTime)
	router.POST(baseURL+"/reserve", wrapper.PostReserve)
	router.POST(baseURL+"/writeOff", wrapper.PostWriteOff)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
