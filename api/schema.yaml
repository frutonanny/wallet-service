openapi: 3.0.3
info:
  title: Service Wallet API
  version: v1

servers:
  - url: http://localhost:8081/v1
    description: Development server

paths:
  /add:
    post:
      description: "Пополнить баланс пользователя userID на сумму cash."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRequest"
      responses:
        '200':
          description: "Баланс пополнен."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddResponse"

  /reserve:
    post:
      description: "Зарезервировать сумму средств price у пользователя userID для оплаты заказа orderID."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReserveRequest"
      responses:
        '200':
          description: "Сумма зарезервирована."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReserveResponse"

  /writeOff:
    post:
      description: "Списать сумму средств price у пользователя userID для оплаты заказа orderID."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WriteOffRequest"
      responses:
        '200':
          description: "Сумма списана."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WriteOffResponse"

  /cancel:
    post:
      description: "Разрезервировать сумму средств price у пользователя userID по заказу orderID."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelRequest"
      responses:
        '200':
          description: "Сумма разрезервирована."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelResponse"

  /getBalance:
    post:
      description: "Показать баланс пользователя userID."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetBalanceRequest"
      responses:
        '200':
          description: "Баланс показан."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBalanceResponse"

  /getTransactions:
    post:
      description: "Показать список транзакций пользователя userID, отсортированный по переданному параметру."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTransactionsRequest"
      responses:
        '200':
          description: "Список транзакций."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTransactionsResponse"

  /getTransactionsByTime:
    post:
      description: "Показать список транзакций пользователя userID по временному промежутку, отсортированный  по 
      по времени от новых транзакций к старым."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTransactionsByTimeRequest"
      responses:
        '200':
          description: "Список транзакций."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTransactionsByTimeResponse"

  /getReport:
    post:
      description: "Получить ссылку на CSV-файл, в котором лежит отчет за период period по всем услугам."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetReportRequest"
      responses:
        '200':
          description: "Ссылка на CSV файл."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReportResponse"


components:
  schemas:
    Error:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
          minLength: 1
        code:
          type: string
          minLength: 1

    AddRequest:
      required:
        - userID
        - cash
      properties:
        userID:
          type: integer
          format: int64
          description: "Идентификатор пользователя."
          example: 1
        cash:
          type: integer
          format: int64
          description: "Сумма в копейках."
          example: 1000

    AddResponse:
      properties:
        data:
          $ref: "#/components/schemas/AddData"
        error:
          $ref: "#/components/schemas/Error"

    AddData:
      required:
        - balance
      properties:
        balance:
          type: integer
          format: int64
          description: "Текущий баланс пользователя в копейках с учетом пополнения."
          example: 1000

    ReserveRequest:
      required:
        - userID
        - serviceID
        - orderID
        - price
      properties:
        userID:
          type: integer
          format: int64
          description: "Идентификатор пользователя."
          example: 1
        serviceID:
          type: integer
          format: int64
          description: "Идентификатор услуги."
          example: 1
        orderID:
          type: integer
          format: int64
          description: "Идентификатор заказа"
          example: 1
        price:
          type: integer
          format: int64
          description: "Стоимость заказа в копейках."
          example: 1000

    ReserveResponse:
      properties:
        data:
          $ref: "#/components/schemas/ReserveData"
        error:
          $ref: "#/components/schemas/Error"

    ReserveData:
      required:
        - balance
      properties:
        balance:
          type: integer
          format: int64
          description: "Текущий баланс пользователя в копейках за вычетом зарезервированных средств."
          example: 1000

    WriteOffRequest:
      required:
        - userID
        - serviceID
        - orderID
        - price
      properties:
        userID:
          type: integer
          format: int64
          description: "Идентификатор пользователя."
          example: 1
        serviceID:
          type: integer
          format: int64
          description: "Идентификатор услуги."
          example: 1
        orderID:
          type: integer
          format: int64
          description: "Идентификатор заказа"
          example: 1
        price:
          type: integer
          format: int64
          description: "Стоимость заказа в копейках."
          example: 1000

    WriteOffResponse:
      properties:
        data:
          $ref: "#/components/schemas/WriteOffData"
        error:
          $ref: "#/components/schemas/Error"

    WriteOffData:
      required:
        - balance
      properties:
        balance:
          type: integer
          format: int64
          description: "Текущий баланс пользователя в копейках за вычетом списанных средств."
          example: 1000

    CancelRequest:
      required:
        - userID
        - orderID
      properties:
        userID:
          type: integer
          format: int64
          description: "Идентификатор пользователя."
          example: 1
        orderID:
          type: integer
          format: int64
          description: "Идентификатор заказа"
          example: 1

    CancelResponse:
      properties:
        data:
          $ref: "#/components/schemas/CancelData"
        error:
          $ref: "#/components/schemas/Error"

    CancelData:
      required:
        - balance
      properties:
        balance:
          type: integer
          format: int64
          description: "Текущий баланс пользователя в копейках с учетом разрезервированных средств."
          example: 1000

    GetBalanceRequest:
      required:
        - userID
      properties:
        userID:
          type: integer
          format: int64
          description: "Идентификатор пользователя."
          example: 1

    GetBalanceResponse:
      properties:
        data:
          $ref: "#/components/schemas/GetBalanceData"
        error:
          $ref: "#/components/schemas/Error"

    GetBalanceData:
      required:
        - balance
      properties:
        balance:
          type: integer
          format: int64
          description: "Текущий баланс пользователя в копейках."
          example: 1000

    GetTransactionsRequest:
      required:
        - userID
        - limit
        - offset
        - sortBy
        - direction
      properties:
        userID:
          type: integer
          format: int64
          description: "Идентификатор пользователя."
          example: 1
        limit:
          type: integer
          format: int64
          maximum: 100
          description: "Количество записей."
          example: 10
        offset:
          type: integer
          format: int64
          minimum: 0
          description: "Смещение по записям."
          example: 1
        sortBy:
          type: string
          enum: [ "created_at", "amount" ]
          description: "Поле, по которому происходит сортировка (по дате / по сумме)."
          example: "created_at"
        direction:
          type: string
          enum: [ "asc", "desc" ]
          description: "Направление сортировки (по возрастанию / убыванию)."
          example: "asc"

    GetTransactionsResponse:
      properties:
        data:
          $ref: "#/components/schemas/GetTransactionsData"
        error:
          $ref: "#/components/schemas/Error"

    GetTransactionsData:
      required:
        - transactions
      properties:
        transactions:
          description: "Отсортированный список транзакций пользователя userID."
          type: array
          items:
            $ref: "#/components/schemas/Transaction"

    Transaction:
      required:
        - description
        - amount
        - createdAt
      properties:
        "description":
          type: string
          minLength: 1
          maxLength: 1000
          description: "Описание денежной операции."
          example: "Зачисление средств"
        amount:
          type: integer
          format: int64
          description: "Количество денежных средств, задействованных в данной денежной операции."
          example: 500
        createdAt:
          type: string
          format: date-time
          description: "Время, когда была совершена операция."
          example: "2022-11-06T13:05:49.73709Z"

    GetTransactionsByTimeRequest:
      required:
        - userID
        - start
        - end
      properties:
        userID:
          type: integer
          format: int64
          description: "Идентификатор пользователя."
          example: 1
        start:
          type: string
          format: date-time
          description: "Временная точка в формате RFC3339, от которой начинается поиск транзакций."
          example: "2022-07-02T10:00:00Z"
        end:
          type: string
          format: date-time
          description: "Временная точка в формате RFC3339, до которой происходит поиск транзакций."
          example: "2022-07-04T10:00:00Z"

    GetTransactionsByTimeResponse:
      properties:
        data:
          $ref: "#/components/schemas/GetTransactionsByTimeData"
        error:
          $ref: "#/components/schemas/Error"

    GetTransactionsByTimeData:
      required:
        - transactions
      properties:
        transactions:
          description: "Список транзакций пользователя userID."
          type: array
          items:
            $ref: "#/components/schemas/Transaction"

    GetReportRequest:
      required:
        - period
      properties:
        period:
          type: string
          minLength: 7
          maxLength: 7
          description: "Время в формате 'yyyy-mm'."
          example: "2022-10"

    GetReportResponse:
      properties:
        data:
          $ref: "#/components/schemas/GetReportData"
        error:
          $ref: "#/components/schemas/Error"

    GetReportData:
      required:
        - url
      properties:
        url:
          type: string
          minLength: 1
          format: uri
          description: "Ссылка на CSV файл."
